{
  "address": "0xC9E09DDF366b169FDEC1e0e4C1C35E25D2D5Ce65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "enteranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnteranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x227f9853b5a71bcfe6a8ca63b477bc9d411c399595e35a78a52e86031019ba8e",
  "receipt": {
    "to": null,
    "from": "0x80744e7DAaDb9E175B76f1651f564244b2F806D7",
    "contractAddress": "0xC9E09DDF366b169FDEC1e0e4C1C35E25D2D5Ce65",
    "transactionIndex": 25,
    "gasUsed": "1207330",
    "logsBloom": "0x
    "blockHash": "0xbd16f163dad6039b6698aabf2f0a8acebbf78e5b0fe3e35049e0105c19e7e05f",
    "transactionHash": "0x227f9853b5a71bcfe6a8ca63b477bc9d411c399595e35a78a52e86031019ba8e",
    "logs": [],
    "blockNumber": 11056585,
    "cumulativeGasUsed": "6925521",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    8787,
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "b731744f3f8c050191df546432069afc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enteranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnteranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughEthEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__UpKeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    enum RaffleType {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    uint256 immutable i_enteranceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_coordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private immutable i_gasLimit;\\r\\n    uint32 private immutable NUM_WORDS = 1;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    address private s_recentWinner;\\r\\n    RaffleType private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    /** functions */\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 enteranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 gasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_enteranceFee = enteranceFee;\\r\\n        i_coordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_gasLimit = gasLimit;\\r\\n        s_raffleState = RaffleType.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_enteranceFee) {\\r\\n            revert Raffle__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (s_raffleState != RaffleType.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        bool isOpen = (RaffleType.OPEN == s_raffleState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes memory /* performData */\\r\\n    ) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Raffle__UpKeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        s_raffleState = RaffleType.CALCULATING;\\r\\n        uint256 requestId = i_coordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_gasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n        s_raffleState = RaffleType.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /* View / Pure functions */\\r\\n\\r\\n    function getEnteranceFee() public view returns (uint256) {\\r\\n        return i_enteranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleType) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint32) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimestamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint16) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbeacedc74e4fba9d60b60614a39fa65d06ec6c27aeb377784135848a1f074ba0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600163ffffffff166101409063ffffffff168152503480156200002757600080fd5b506040516200183d3803806200183d83398181016040528101906200004d9190620002a9565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff0219169083600181111562000122576200012162000345565b5b02179055504260028190555080610160818152505050505050505062000374565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001758262000148565b9050919050565b620001878162000168565b81146200019357600080fd5b50565b600081519050620001a7816200017c565b92915050565b6000819050919050565b620001c281620001ad565b8114620001ce57600080fd5b50565b600081519050620001e281620001b7565b92915050565b6000819050919050565b620001fd81620001e8565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b600067ffffffffffffffff82169050919050565b620002428162000223565b81146200024e57600080fd5b50565b600081519050620002628162000237565b92915050565b600063ffffffff82169050919050565b620002838162000268565b81146200028f57600080fd5b50565b600081519050620002a38162000278565b92915050565b60008060008060008060c08789031215620002c957620002c862000143565b5b6000620002d989828a0162000196565b9650506020620002ec89828a01620001d1565b9550506040620002ff89828a016200020c565b94505060606200031289828a0162000251565b93505060806200032589828a0162000292565b92505060a06200033889828a01620001d1565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161016051611447620003f66000396000818161081f01526108c801526000818161069401526107af01526000610673015260006106500152600061062f015260006105f30152600081816103cf015261078701526000818161030f015261036301526114476000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063e55ae4e814610263578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b5780634585e33b14610125578063473f1ddc1461014e578063535bf50f14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c98565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610e56565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061014c60048036038101906101479190610f67565b61053c565b005b34801561015a57600080fd5b50610163610759565b6040516101709190610ff1565b60405180910390f35b34801561018557600080fd5b5061018e610783565b60405161019b919061101b565b60405180910390f35b3480156101b057600080fd5b506101b96107ab565b6040516101c69190611055565b60405180910390f35b3480156101db57600080fd5b506101e46107d3565b6040516101f1919061108d565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f67565b6107dc565b60405161022f92919061114b565b60405180910390f35b34801561024457600080fd5b5061024d6108c4565b60405161025a919061101b565b60405180910390f35b34801561026f57600080fd5b5061028a6004803603810190610285919061117b565b6108ec565b6040516102979190610ff1565b60405180910390f35b3480156102ac57600080fd5b506102b5610933565b6040516102c2919061101b565b60405180910390f35b3480156102d757600080fd5b506102e061093d565b6040516102ed919061101b565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b69291906111a8565b60405180910390fd5b6103c98282610949565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610c21565b5b600160149054906101000a900460ff16600181111561045d5761045c610c21565b5b14610494576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610556604051806020016040528060008152506107dc565b509050806105c55747600080549050600160149054906101000a900460ff16600181111561058757610586610c21565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105bc939291906111d1565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105ea576105e9610c21565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016106d3959493929190611244565b602060405180830381600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072591906112ac565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006003905090565b600060606000600160149054906101000a900460ff16600181111561080457610803610c21565b5b6000600181111561081857610817610c21565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261084c9190611308565b1190506000806000805490501190506000804711905083801561086c5750825b80156108755750815b801561087e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109015761090061133c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b60008080549050826000815181106109645761096361133c565b5b6020026020010151610976919061139a565b9050600080828154811061098d5761098c61133c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a21906113fc565b60006040518083038185875af1925050503d8060008114610a5e576040519150601f19603f3d011682016040523d82523d6000602084013e610a63565b606091505b5050905080610a9e576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a26000600160146101000a81548160ff02191690836001811115610b0757610b06610c21565b5b0217905550600067ffffffffffffffff811115610b2757610b26610d13565b5b604051908082528060200260200182016040528015610b555781602001602082028036833780820191505090505b5060009080519060200190610b6b929190610b7a565b50426002819055505050505050565b828054828255906000526020600020908101928215610bf3579160200282015b82811115610bf25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b9a565b5b509050610c009190610c04565b5090565b5b80821115610c1d576000816000905550600101610c05565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6157610c60610c21565b5b50565b6000819050610c7282610c50565b919050565b6000610c8282610c64565b9050919050565b610c9281610c77565b82525050565b6000602082019050610cad6000830184610c89565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610cda81610cc7565b8114610ce557600080fd5b50565b600081359050610cf781610cd1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4b82610d02565b810181811067ffffffffffffffff82111715610d6a57610d69610d13565b5b80604052505050565b6000610d7d610cb3565b9050610d898282610d42565b919050565b600067ffffffffffffffff821115610da957610da8610d13565b5b602082029050602081019050919050565b600080fd5b6000610dd2610dcd84610d8e565b610d73565b90508083825260208201905060208402830185811115610df557610df4610dba565b5b835b81811015610e1e5780610e0a8882610ce8565b845260208401935050602081019050610df7565b5050509392505050565b600082601f830112610e3d57610e3c610cfd565b5b8135610e4d848260208601610dbf565b91505092915050565b60008060408385031215610e6d57610e6c610cbd565b5b6000610e7b85828601610ce8565b925050602083013567ffffffffffffffff811115610e9c57610e9b610cc2565b5b610ea885828601610e28565b9150509250929050565b600080fd5b600067ffffffffffffffff821115610ed257610ed1610d13565b5b610edb82610d02565b9050602081019050919050565b82818337600083830152505050565b6000610f0a610f0584610eb7565b610d73565b905082815260208101848484011115610f2657610f25610eb2565b5b610f31848285610ee8565b509392505050565b600082601f830112610f4e57610f4d610cfd565b5b8135610f5e848260208601610ef7565b91505092915050565b600060208284031215610f7d57610f7c610cbd565b5b600082013567ffffffffffffffff811115610f9b57610f9a610cc2565b5b610fa784828501610f39565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fdb82610fb0565b9050919050565b610feb81610fd0565b82525050565b60006020820190506110066000830184610fe2565b92915050565b61101581610cc7565b82525050565b6000602082019050611030600083018461100c565b92915050565b600063ffffffff82169050919050565b61104f81611036565b82525050565b600060208201905061106a6000830184611046565b92915050565b600061ffff82169050919050565b61108781611070565b82525050565b60006020820190506110a2600083018461107e565b92915050565b60008115159050919050565b6110bd816110a8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110fd5780820151818401526020810190506110e2565b8381111561110c576000848401525b50505050565b600061111d826110c3565b61112781856110ce565b93506111378185602086016110df565b61114081610d02565b840191505092915050565b600060408201905061116060008301856110b4565b81810360208301526111728184611112565b90509392505050565b60006020828403121561119157611190610cbd565b5b600061119f84828501610ce8565b91505092915050565b60006040820190506111bd6000830185610fe2565b6111ca6020830184610fe2565b9392505050565b60006060820190506111e6600083018661100c565b6111f3602083018561100c565b611200604083018461100c565b949350505050565b6000819050919050565b61121b81611208565b82525050565b600067ffffffffffffffff82169050919050565b61123e81611221565b82525050565b600060a0820190506112596000830188611212565b6112666020830187611235565b611273604083018661107e565b6112806060830185611046565b61128d6080830184611046565b9695505050505050565b6000815190506112a681610cd1565b92915050565b6000602082840312156112c2576112c1610cbd565b5b60006112d084828501611297565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131382610cc7565b915061131e83610cc7565b925082821015611331576113306112d9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113a582610cc7565b91506113b083610cc7565b9250826113c0576113bf61136b565b5b828206905092915050565b600081905092915050565b50565b60006113e66000836113cb565b91506113f1826113d6565b600082019050919050565b6000611407826113d9565b915081905091905056fea26469706673582212201dce5fb71dd7fc016292757b0b250bdd538a806e001a861bbed80041156be80f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063e55ae4e814610263578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b5780634585e33b14610125578063473f1ddc1461014e578063535bf50f14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c98565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610e56565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061014c60048036038101906101479190610f67565b61053c565b005b34801561015a57600080fd5b50610163610759565b6040516101709190610ff1565b60405180910390f35b34801561018557600080fd5b5061018e610783565b60405161019b919061101b565b60405180910390f35b3480156101b057600080fd5b506101b96107ab565b6040516101c69190611055565b60405180910390f35b3480156101db57600080fd5b506101e46107d3565b6040516101f1919061108d565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f67565b6107dc565b60405161022f92919061114b565b60405180910390f35b34801561024457600080fd5b5061024d6108c4565b60405161025a919061101b565b60405180910390f35b34801561026f57600080fd5b5061028a6004803603810190610285919061117b565b6108ec565b6040516102979190610ff1565b60405180910390f35b3480156102ac57600080fd5b506102b5610933565b6040516102c2919061101b565b60405180910390f35b3480156102d757600080fd5b506102e061093d565b6040516102ed919061101b565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b69291906111a8565b60405180910390fd5b6103c98282610949565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610c21565b5b600160149054906101000a900460ff16600181111561045d5761045c610c21565b5b14610494576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610556604051806020016040528060008152506107dc565b509050806105c55747600080549050600160149054906101000a900460ff16600181111561058757610586610c21565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105bc939291906111d1565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105ea576105e9610c21565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016106d3959493929190611244565b602060405180830381600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072591906112ac565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006003905090565b600060606000600160149054906101000a900460ff16600181111561080457610803610c21565b5b6000600181111561081857610817610c21565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261084c9190611308565b1190506000806000805490501190506000804711905083801561086c5750825b80156108755750815b801561087e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109015761090061133c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b60008080549050826000815181106109645761096361133c565b5b6020026020010151610976919061139a565b9050600080828154811061098d5761098c61133c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a21906113fc565b60006040518083038185875af1925050503d8060008114610a5e576040519150601f19603f3d011682016040523d82523d6000602084013e610a63565b606091505b5050905080610a9e576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a26000600160146101000a81548160ff02191690836001811115610b0757610b06610c21565b5b0217905550600067ffffffffffffffff811115610b2757610b26610d13565b5b604051908082528060200260200182016040528015610b555781602001602082028036833780820191505090505b5060009080519060200190610b6b929190610b7a565b50426002819055505050505050565b828054828255906000526020600020908101928215610bf3579160200282015b82811115610bf25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b9a565b5b509050610c009190610c04565b5090565b5b80821115610c1d576000816000905550600101610c05565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6157610c60610c21565b5b50565b6000819050610c7282610c50565b919050565b6000610c8282610c64565b9050919050565b610c9281610c77565b82525050565b6000602082019050610cad6000830184610c89565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610cda81610cc7565b8114610ce557600080fd5b50565b600081359050610cf781610cd1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4b82610d02565b810181811067ffffffffffffffff82111715610d6a57610d69610d13565b5b80604052505050565b6000610d7d610cb3565b9050610d898282610d42565b919050565b600067ffffffffffffffff821115610da957610da8610d13565b5b602082029050602081019050919050565b600080fd5b6000610dd2610dcd84610d8e565b610d73565b90508083825260208201905060208402830185811115610df557610df4610dba565b5b835b81811015610e1e5780610e0a8882610ce8565b845260208401935050602081019050610df7565b5050509392505050565b600082601f830112610e3d57610e3c610cfd565b5b8135610e4d848260208601610dbf565b91505092915050565b60008060408385031215610e6d57610e6c610cbd565b5b6000610e7b85828601610ce8565b925050602083013567ffffffffffffffff811115610e9c57610e9b610cc2565b5b610ea885828601610e28565b9150509250929050565b600080fd5b600067ffffffffffffffff821115610ed257610ed1610d13565b5b610edb82610d02565b9050602081019050919050565b82818337600083830152505050565b6000610f0a610f0584610eb7565b610d73565b905082815260208101848484011115610f2657610f25610eb2565b5b610f31848285610ee8565b509392505050565b600082601f830112610f4e57610f4d610cfd565b5b8135610f5e848260208601610ef7565b91505092915050565b600060208284031215610f7d57610f7c610cbd565b5b600082013567ffffffffffffffff811115610f9b57610f9a610cc2565b5b610fa784828501610f39565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fdb82610fb0565b9050919050565b610feb81610fd0565b82525050565b60006020820190506110066000830184610fe2565b92915050565b61101581610cc7565b82525050565b6000602082019050611030600083018461100c565b92915050565b600063ffffffff82169050919050565b61104f81611036565b82525050565b600060208201905061106a6000830184611046565b92915050565b600061ffff82169050919050565b61108781611070565b82525050565b60006020820190506110a2600083018461107e565b92915050565b60008115159050919050565b6110bd816110a8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110fd5780820151818401526020810190506110e2565b8381111561110c576000848401525b50505050565b600061111d826110c3565b61112781856110ce565b93506111378185602086016110df565b61114081610d02565b840191505092915050565b600060408201905061116060008301856110b4565b81810360208301526111728184611112565b90509392505050565b60006020828403121561119157611190610cbd565b5b600061119f84828501610ce8565b91505092915050565b60006040820190506111bd6000830185610fe2565b6111ca6020830184610fe2565b9392505050565b60006060820190506111e6600083018661100c565b6111f3602083018561100c565b611200604083018461100c565b949350505050565b6000819050919050565b61121b81611208565b82525050565b600067ffffffffffffffff82169050919050565b61123e81611221565b82525050565b600060a0820190506112596000830188611212565b6112666020830187611235565b611273604083018661107e565b6112806060830185611046565b61128d6080830184611046565b9695505050505050565b6000815190506112a681610cd1565b92915050565b6000602082840312156112c2576112c1610cbd565b5b60006112d084828501611297565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131382610cc7565b915061131e83610cc7565b925082821015611331576113306112d9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113a582610cc7565b91506113b083610cc7565b9250826113c0576113bf61136b565b5b828206905092915050565b600081905092915050565b50565b60006113e66000836113cb565b91506113f1826113d6565b600082019050919050565b6000611407826113d9565b915081905091905056fea26469706673582212201dce5fb71dd7fc016292757b0b250bdd538a806e001a861bbed80041156be80f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "functions "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 196,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 215,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 218,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleType)191"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleType)191": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleType",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}